#include "Command.h"
#include "CommandDeclarations.h"
#include "LocalCommandDeclarations.h"
#include "LocalParameters.h"

const int NO_CITATION = 0;
const char* binary_name = "metaeuk";
const char* tool_name = "metaeuk";
const char* tool_introduction = "Metagenomic tool for Eukaryotic data.";
const char* main_author = "Eli Levy Karin, eli.levy.karin@gmail.com";
const char* show_extended_help = "1";
const char* show_bash_info = "1";

LocalParameters& par = LocalParameters::getLocalInstance();

std::vector<struct Command> commands = {
        // Main tools  (for non-experts)
        {"predictexons",             predictexons,            &par.predictexonsworkflow,    COMMAND_MAIN,
                "Predict eukaryotic exons based on protein similarity",
                "An analog of 6-frame translation to produce putative protein fragments. Search against protein DB. Compatible exon set identified with respect to each target. Two dynamic programming outputs: predictexonsBaseName_dp_protein_contig_strand_map and predictexonsBaseName_dp_optimal_exon_sets",
                "Eli Levy Karin <eli.levy.karin@gmail.com>",
                "<i:contigsDB> <i:proteinsDB> <o:predictexonsBaseName> <tmpDir>",
                NO_CITATION, {{"",DbType::ACCESS_MODE_INPUT, NULL}}},
        {"collectoptimalset",             collectoptimalset,            &par.collectoptimalset,    COMMAND_EXPERT,
                "Collect the optimal set of exons for a target protein",
                "A dynamic programming procedure on all candidates of each contig and strand combination",
                "Eli Levy Karin <eli.levy.karin@gmail.com>",
                "<i:proteinToPotentialExonsWithContigInfoDB> <i:proteinsDB> <o:predictexonsBaseName>",
                NO_CITATION, {{"",DbType::ACCESS_MODE_INPUT, NULL}}},
        {"unitesetstosequencedb",             unitesetstosequencedb,            &par.onlythreads,    COMMAND_EXPERT,
                "Create a sequence DB from optimal exon sets",
                "Each optimal set is joined to a single sequence",
                "Eli Levy Karin <eli.levy.karin@gmail.com>",
                "<i:contigsDB> <i:proteinsDB> <i:dp_protein_contig_strand_map> <i:dp_optimal_exon_sets> <o:unitedexons>",
                NO_CITATION, {{"",DbType::ACCESS_MODE_INPUT, NULL}}},
        {"reduceredundancy",             reduceredundancy,            &par.reduceredundancyworkflow,    COMMAND_MAIN,
                "A greedy approach to group metaeuk predictions which share an exon",
                "A protein coding gene can be predicted more than once due to target DB homologies. A cluster representative is selected. Predictions in a cluster share an exon with the representative. Outputs: reduceRedundBaseName_grouped_predictions, reduceRedundBaseName_dp_protein_contig_strand_map, reduceRedundBaseName_dp_optimal_exon_sets, reduceRedundBaseName_grouped_predictions_no_overlap, reduceRedundBaseName_no_overlap_dp_protein_contig_strand_map and reduceRedundBaseName_no_overlap_dp_optimal_exon_sets",
                "Eli Levy Karin <eli.levy.karin@gmail.com>",
                "<i:dp_protein_contig_strand_map> <i:dp_optimal_exon_sets> <o:reduceRedundBaseName> <tmpDir>",
                NO_CITATION, {{"",DbType::ACCESS_MODE_INPUT, NULL}}},
        {"assigntaxonomy",             assigntaxonomy,            &par.assigntaxonomyworkflow,    COMMAND_HIDDEN,
                "Assign taxonomy to each representative prediction using 2bLCA",
                "Assign taxonomy to each representative prediction using 2bLCA against a uniprot-based refernce database. Contigs are assigned based on their predictions",
                "Eli Levy Karin <eli.levy.karin@gmail.com>",
                "<i:metaeukBaseName> <i:uniprotFasta> <tmpDir>",
                NO_CITATION, {{"",DbType::ACCESS_MODE_INPUT, NULL}}},
        {"unitetoseqdbs",             unitetoseqdbs,            &par.unitetoseqdbsworkflow,    COMMAND_MAIN,
                "Unite the exons of predictions to sequence BD",
                "Unite and translate the exons of predictions (either before or after redundancy reduction - depending on the dp files) to sequence BD. Outputs: unitedexonsBasename_united_exons, unitedexonsBasename_united_exons_aa",
                "Eli Levy Karin <eli.levy.karin@gmail.com>",
                "<i:contigsDB> <i:proteinsDB> <i:dp_protein_contig_strand_map> <i:dp_optimal_exon_sets> <o:unitedexonsBasename> <tmpDir>",
                NO_CITATION, {{"",DbType::ACCESS_MODE_INPUT, NULL}}},
        {"grouppredictions",             grouppredictions,            &par.onlythreads,    COMMAND_EXPERT,
                "Assignment of predictions to cluster",
                "A greedy examination of predictions accoridng to their contig order, subordered by the number of exons. Predictions in a cluster share an exon with the representative.",
                "Eli Levy Karin <eli.levy.karin@gmail.com>",
                "<i:contigStrandSortedMap> <o:groupedPredictionsDB> <o:groupedPredictionsDBNoOverlpa>",
                NO_CITATION, {{"",DbType::ACCESS_MODE_INPUT, NULL}}},
        {"createdb",             createdb,             &par.createdb,             COMMAND_MAIN,
                "Convert protein sequence set in a FASTA file to MMseqs sequence DB format",
                "converts a protein sequence flat/gzipped FASTA or FASTQ file to the MMseqs sequence DB format. This format is needed as input to mmseqs search, cluster and many other tools.",
                "Martin Steinegger <martin.steinegger@mpibpc.mpg.de>",
                "<i:fastaFile1[.gz]> ... <i:fastaFileN[.gz]> <o:sequenceDB>",
                NO_CITATION, {{"",DbType::ACCESS_MODE_INPUT, NULL}}},
        {"extractorfs",          extractorfs,          &par.extractorfs,          COMMAND_HIDDEN,
                "Extract open reading frames from all six frames from nucleotide sequence DB",
                NULL,
                "Milot Mirdita <milot@mirdita.de>",
                "<i:sequenceDB> <o:sequenceDB>",
                NO_CITATION, {{"sequenceDB", DbType::ACCESS_MODE_INPUT,  &DbValidator::sequenceDb },
                                    {"sequenceDB", DbType::ACCESS_MODE_OUTPUT,  &DbValidator::sequenceDb }}},
        {"orftocontig",          orftocontig,          &par.orftocontig,          COMMAND_HIDDEN,
                "Obtain location information of extracted orfs with respect to their contigs in alignment format",
                "Parses extracted orfs headers to compute their coordinates on the contig and writes the results in alignment format",
                "Eli Levy Karin <eli.levy.karin@gmail.com> ",
                "<i:contigsSequenceDB> <i:extractedOrfsHeadersDB> <o:orfsAlignedToContigDB>",
                NO_CITATION, {{"",DbType::ACCESS_MODE_INPUT, NULL}}},
        {"translatenucs",        translatenucs,        &par.translatenucs,        COMMAND_HIDDEN,
                "Translate nucleotide sequence DB into protein sequence DB",
                NULL,
                "Milot Mirdita <milot@mirdita.de>",
                "<i:sequenceDB> <o:sequenceDB>",
                NO_CITATION, {{"sequenceDB", DbType::ACCESS_MODE_INPUT,  &DbValidator::nuclDb },
                                   {"sequenceDB", DbType::ACCESS_MODE_OUTPUT, &DbValidator::aaDb }}},
        {"search",               search,               &par.searchworkflow,       COMMAND_HIDDEN,
                "Search with query sequence or profile DB (iteratively) through target sequence DB",
                "Searches with the sequences or profiles query DB through the target sequence DB by running the prefilter tool and the align tool for Smith-Waterman alignment. For each query a results file with sequence matches is written as entry into a database of search results (alignmentDB).\nIn iterative profile search mode, the detected sequences satisfying user-specified criteria are aligned to the query MSA, and the resulting query profile is used for the next search iteration. Iterative profile searches are usually much more sensitive than (and at least as sensitive as) searches with single query sequences.",
                "Martin Steinegger <martin.steinegger@mpibpc.mpg.de>",
                "<i:queryDB> <i:targetDB> <o:alignmentDB> <tmpDir>",
                NO_CITATION, {{"queryDB",  DbType::ACCESS_MODE_INPUT,  &DbValidator::sequenceDb },
                                  {"targetDB", DbType::ACCESS_MODE_INPUT,  &DbValidator::sequenceDb },
                                  {"alignmentDB", DbType::ACCESS_MODE_OUTPUT, &DbValidator::alignmentDb  },
                                  {"tmpDir", DbType::ACCESS_MODE_INPUT, &DbValidator::directory }}},
        // Taxonomy
        {"taxonomy",             taxonomy,             &par.taxonomy,             COMMAND_HIDDEN,
                "Compute taxonomy and lowest common ancestor for each sequence.",
                NULL,
                "Milot Mirdita <milot@mirdita.de> & Martin Steinegger <martin.steinegger@mpibpc.mpg.de>",
                "<i:queryDB> <i:targetDB> <o:taxaDB> <tmpDir>",
                NO_CITATION, {{"queryDB",  DbType::ACCESS_MODE_INPUT,  &DbValidator::sequenceDb },
                                   {"targetDB", DbType::ACCESS_MODE_INPUT,  &DbValidator::taxSequenceDb },
                                   {"taxaDB",   DbType::ACCESS_MODE_OUTPUT,  &DbValidator::taxResult },
                                   {"tmpDir", DbType::ACCESS_MODE_INPUT,    &DbValidator::directory }}},
        {"createtaxdb",          createtaxdb,          &par.onlyverbosity,         COMMAND_HIDDEN,
                "Annotates a sequence database with NCBI taxonomy information",
                "Annotates a sequence database with NCBI taxonomy information. The program will download the Uniprot taxMappingFile and ncbi-taxdump-folder and assign taxonmical identifier to the sequence database."
                "An custom mapping from sequence to taxonomic identifier can be provided by the taxMappingFile.",
                "Martin Steinegger <martin.steinegger@mpibpc.mpg.de>",
                "<i:sequenceDB> [<i:taxMappingFile> <i:ncbi-taxdump-folder>]  <tmpDir>",
                NO_CITATION, {{"",DbType::ACCESS_MODE_INPUT, NULL}}},
        {"addtaxonomy",          addtaxonomy,          &par.threadsandcompression, COMMAND_HIDDEN,
                "Add taxonomy information to result database.",
                NULL,
                "Martin Steinegger <martin.steinegger@mpibpc.mpg.de>",
                "<i:targetDB> <i:resultDB> <o:resultDB>",
                NO_CITATION, {{"targetDB", DbType::ACCESS_MODE_INPUT, &DbValidator::taxSequenceDb },
                                   {"resultDB",   DbType::ACCESS_MODE_INPUT, &DbValidator::resultDb },
                                   {"resultDB",   DbType::ACCESS_MODE_OUTPUT, &DbValidator::resultDb }}},
        {"lca",                  lca,                  &par.lca,                  COMMAND_HIDDEN,
                "Compute the lowest common ancestor from a set of taxa.",
                NULL,
                "Milot Mirdita <milot@mirdita.de>",
                "<i:targetDB> <i:resultDB> <o:taxaDB>",
                NO_CITATION, {{"targetDB", DbType::ACCESS_MODE_INPUT, &DbValidator::taxSequenceDb },
                                   {"resultDB", DbType::ACCESS_MODE_INPUT, &DbValidator::resultDb },
                                   {"taxDB",    DbType::ACCESS_MODE_OUTPUT, &DbValidator::taxResult }}},
        {"filtertaxdb",          filtertaxdb,          &par.filtertaxdb,          COMMAND_HIDDEN,
                "Filter taxonomy database.",
                NULL,
                "Martin Steinegger <martin.steinegger@mpibpc.mpg.de>",
                "<i:targetDB> <i:taxaDB> <o:taxaDB>",
                NO_CITATION, {{"targetDB", DbType::ACCESS_MODE_INPUT, &DbValidator::taxSequenceDb },
                                   {"resultDB", DbType::ACCESS_MODE_INPUT, &DbValidator::resultDb },
                                   {"taxDB",   DbType::ACCESS_MODE_OUTPUT, &DbValidator::taxResult }}},
        // required for search:
        {"diskspaceavail",       diskspaceavail,       &par.empty,                COMMAND_HIDDEN,
                "",
                NULL,
                "",
                "",
                NO_CITATION, {{"",DbType::ACCESS_MODE_INPUT, NULL}}},
        {"sortresult",           sortresult,           &par.sortresult,           COMMAND_HIDDEN,
                "Sort a result database in the same order as prefilter or align would.",
                NULL,
                "Milot Mirdita <milot@mirdita.de>",
                "<i:resultbDB> <o:resultDB>",
                NO_CITATION, {{"resultDB", DbType::ACCESS_MODE_INPUT,  &DbValidator::resultDb },
                                   {"resultDB", DbType::ACCESS_MODE_OUTPUT,  &DbValidator::resultDb }}},
        {"result2stats",         result2stats,         &par.result2stats,         COMMAND_HIDDEN,
                "Compute statistics for each entry in a sequence, prefilter, alignment or cluster DB",
                NULL,
                "Clovis Galiez & Martin Steinegger <martin.steinegger@mpibpc.mpg.de>",
                "<i:queryDB> <i:targetDB> <i:resultDB> <o:statsDB>",
                NO_CITATION, {{"queryDB",  DbType::ACCESS_MODE_INPUT,  &DbValidator::sequenceDb },
                                   {"targetDB", DbType::ACCESS_MODE_INPUT,  &DbValidator::sequenceDb },
                                   {"resultDB", DbType::ACCESS_MODE_INPUT,  &DbValidator::prefAlnResDb },
                                   {"statsDB", DbType::ACCESS_MODE_OUTPUT,  &DbValidator::genericDb }}},
        {"mergedbs",             mergedbs,             &par.mergedbs,             COMMAND_HIDDEN,
                "Merge multiple DBs into a single DB, based on IDs (names) of entries",
                NULL,
                "Martin Steinegger <martin.steinegger@mpibpc.mpg.de>",
                "<i:sequenceDB> <o:resultDB> <i:resultDB1> ... <i:resultDBn>",
                NO_CITATION, {{"sequenceDB", DbType::ACCESS_MODE_INPUT,  &DbValidator::sequenceDb },
                                   {"resultDB", DbType::ACCESS_MODE_OUTPUT,  &DbValidator::resultDb },
                                   {"resultDB", DbType::ACCESS_MODE_INPUT,  &DbValidator::resultDb }}},
        {"prefilter",            prefilter,            &par.prefilter,            COMMAND_HIDDEN,
                "Search with query sequence / profile DB through target DB (k-mer matching + ungapped alignment)",
                "Searches with the sequences or profiles in query DB through the target sequence DB in two consecutive stages: a very fast k-mer matching stage (double matches on same diagonal) and a subsequent ungapped alignment stage. For each query a results file with sequence matches is written as entry into the prefilter DB.",
                "Martin Steinegger <martin.steinegger@mpibpc.mpg.de> & Maria Hauser",
                "<i:queryDB> <i:targetDB> <o:prefilterDB>",
                NO_CITATION, {{"queryDB",  DbType::ACCESS_MODE_INPUT,  &DbValidator::sequenceDb },
                                   {"targetDB", DbType::ACCESS_MODE_INPUT,  &DbValidator::sequenceDb },
                                   {"prefilterDB", DbType::ACCESS_MODE_OUTPUT,  &DbValidator::prefilterDb }}},
        {"align",                align,                &par.align,                COMMAND_HIDDEN,
                "Compute Smith-Waterman alignments for previous results (e.g. prefilter DB, cluster DB)",
                "Calculates Smith-Waterman alignment scores between all sequences in the query database and the sequences of the target database which passed the prefiltering.",
                "Martin Steinegger <martin.steinegger@mpibpc.mpg.de> & Maria Hauser",
                "<i:queryDB> <i:targetDB> <i:resultDB> <o:alignmentDB>",
                NO_CITATION, {{"queryDB",  DbType::ACCESS_MODE_INPUT,  &DbValidator::sequenceDb },
                                   {"targetDB", DbType::ACCESS_MODE_INPUT,  &DbValidator::sequenceDb },
                                   {"resultDB", DbType::ACCESS_MODE_INPUT,  &DbValidator::resultDb },
                                   {"alignmentDB", DbType::ACCESS_MODE_OUTPUT,  &DbValidator::alignmentDb }}},
        {"swapresults",          swapresults,          &par.swapresult,           COMMAND_HIDDEN,
                "Reformat prefilter or alignment DB as if target DB had been searched through query DB",
                NULL,
                "Martin Steinegger <martin.steinegger@mpibpc.mpg.de>, Clovis Galiez & Eli Levy Karin",
                "<i:queryDB> <i:targetDB> <i:resultDB> <o:resultDB>",
                NO_CITATION, {{"queryDB",  DbType::ACCESS_MODE_INPUT,  &DbValidator::sequenceDb },
                                   {"targetDB", DbType::ACCESS_MODE_INPUT,  &DbValidator::sequenceDb },
                                   {"resultDB", DbType::ACCESS_MODE_INPUT,  &DbValidator::prefAlnResDb },
                                   {"resultDB", DbType::ACCESS_MODE_OUTPUT,  &DbValidator::prefAlnResDb }}},
        {"swapdb",               swapdb,               &par.swapdb,               COMMAND_HIDDEN,
                "Create a DB where the key is from the first column of the input result DB",
                NULL,
                "Martin Steinegger <martin.steinegger@mpibpc.mpg.de>, Clovis Galiez & Eli Levy Karin",
                "<i:resultDB> <o:resultDB>",
                NO_CITATION, {{"resultDB",  DbType::ACCESS_MODE_INPUT,  &DbValidator::resultDb },
                                   {"resultDB", DbType::ACCESS_MODE_OUTPUT,  &DbValidator::resultDb }}},   
        {"filterdb",             filterdb,             &par.filterDb,             COMMAND_HIDDEN,
                "Filter a DB by conditioning (regex, numerical, ...) on one of its whitespace-separated columns",
                NULL,
                "Clovis Galiez & Martin Steinegger <martin.steinegger@mpibpc.mpg.de>",
                "<i:resultDB> <o:resultDB>",
                NO_CITATION, {{"resultDB", DbType::ACCESS_MODE_INPUT,  &DbValidator::resultDb },
                                   {"resultDB", DbType::ACCESS_MODE_OUTPUT, &DbValidator::resultDb }}},
        // Special-purpose utilities
        {"reverseseq",          reverseseq,          &par.reverseseq,          COMMAND_EXPERT,
                "Reverse each sequence in a DB",
                "Reversed sequences can be used for the assessment of summary statistics computed for the input sequences",
                "Eli Levy Karin <eli.levy.karin@gmail.com> ",
                "<i:sequenceDB> <o:revSequenceDB>",
                NO_CITATION, {{"sequenceDB", DbType::ACCESS_MODE_INPUT,  &DbValidator::sequenceDb },
                                   {"sequenceDB", DbType::ACCESS_MODE_OUTPUT,  &DbValidator::sequenceDb }}},
        {"convert2fasta",        convert2fasta,        &par.convert2fasta,        COMMAND_FORMAT_CONVERSION,
                "Convert sequence DB to FASTA format",
                NULL,
                "Milot Mirdita <milot@mirdita.de>",
                "<i:sequenceDB> <o:fastaFile>",
                NO_CITATION, {{"sequenceDB",  DbType::ACCESS_MODE_INPUT,  &DbValidator::nuclAaDb },
                                   {"fastaFile", DbType::ACCESS_MODE_OUTPUT,  &DbValidator::flatfile }}},
        {"convertalis",          convertalignments,    &par.convertalignments,    COMMAND_FORMAT_CONVERSION,
                "Convert alignment DB to BLAST-tab format or specified custom-column output format",
                NULL,
                "Martin Steinegger <martin.steinegger@mpibpc.mpg.de>",
                "<i:queryDb> <i:targetDb> <i:alignmentDB> <o:alignmentFile>",
                NO_CITATION, {{"queryDB",  DbType::ACCESS_MODE_INPUT,  &DbValidator::sequenceDb },
                                   {"targetDB", DbType::ACCESS_MODE_INPUT,  &DbValidator::sequenceDb },
                                   {"alignmentDB", DbType::ACCESS_MODE_INPUT,  &DbValidator::alignmentDb },
                                   {"tmpDir", DbType::ACCESS_MODE_OUTPUT, &DbValidator::alignmentDb}}},
        {"result2repseq",       result2repseq,         &par.threadsandcompression, COMMAND_HIDDEN,
                "Get representative sequences for a result database",
                NULL,
                "Milot Mirdita <milot@mirdita.de> & Martin Steinegger <martin.steinegger@mpibpc.mpg.de>",
                "<i:sequenceDB> <i:resultDB> <o:sequenceDb>",
                NO_CITATION, {{"sequenceDB", DbType::ACCESS_MODE_INPUT,  &DbValidator::sequenceDb },
                                   {"resultDB", DbType::ACCESS_MODE_INPUT,  &DbValidator::resultDb },
                                   {"sequenceDb", DbType::ACCESS_MODE_OUTPUT,  &DbValidator::sequenceDb }}},
        {"createsubdb",          createsubdb,          &par.onlyverbosity,        COMMAND_HIDDEN,
                "Create a subset of a DB from a file of IDs of entries",
                NULL,
                "Milot Mirdita <milot@mirdita.de>",
                "<i:subsetFile or DB> <i:resultDB> <o:resultDB>",
                NO_CITATION, {{"subsetFile", DbType::ACCESS_MODE_INPUT,  &DbValidator::allDbAndFlat },
                                    {"resultDB", DbType::ACCESS_MODE_INPUT, &DbValidator::allDb },
                                    {"resultDB", DbType::ACCESS_MODE_OUTPUT, &DbValidator::allDb }}},
        {"rmdb",          rmdb,          &par.onlyverbosity,        COMMAND_HIDDEN,
                "Removes the database",
                NULL,
                "Martin Steinegger <martin.steinegger@mpibpc.mpg.de>",
                "<i:DB>",
                NO_CITATION, {{"DB", DbType::ACCESS_MODE_INPUT, &DbValidator::allDb }}},
        {"mvdb",          mvdb,          &par.onlyverbosity,        COMMAND_HIDDEN,
                "Move the database",
                NULL,
                "Martin Steinegger <martin.steinegger@mpibpc.mpg.de>",
                "<i:srcDB> <o:dstDB>",
                    NO_CITATION, {{"DB", DbType::ACCESS_MODE_INPUT, &DbValidator::allDb },
                                  {"DB", DbType::ACCESS_MODE_OUTPUT, &DbValidator::allDb }}},
        {"result2flat",          result2flat,          &par.result2flat,          COMMAND_FORMAT_CONVERSION,
                "Create a FASTA-like flat file from prefilter DB, alignment DB, or cluster DB",
                NULL,
                "Martin Steinegger <martin.steinegger@mpibpc.mpg.de>",
                "<i:queryDB> <i:targetDB> <i:resultDB> <o:fastaDB>",
                NO_CITATION, {{"queryDB",  DbType::ACCESS_MODE_INPUT,  &DbValidator::sequenceDb },
                                   {"targetDB", DbType::ACCESS_MODE_INPUT,  &DbValidator::sequenceDb },
                                   {"resultDB", DbType::ACCESS_MODE_INPUT,  &DbValidator::resultDb },
                                   {"fastaDB", DbType::ACCESS_MODE_OUTPUT, &DbValidator::flatfile}}},
        {"createtsv",            createtsv,            &par.createtsv,            COMMAND_FORMAT_CONVERSION,
                "Create tab-separated flat file from prefilter DB, alignment DB, cluster DB, or taxa DB",
                "Create tab-separated flat file from prefilter DB, alignment DB, cluster DB, or taxa DB. The target database is optional. This is useful for taxa DB, since it does not have a target key.",
                "Martin Steinegger <martin.steinegger@mpibpc.mpg.de>",
                "<i:queryDB> [<i:targetDB>] <i:resultDB> <o:tsvFile>",
                NO_CITATION, {{"",DbType::ACCESS_MODE_INPUT, NULL}}},
        {"shellcompletion",      shellcompletion,      &par.empty,                COMMAND_HIDDEN,
                "",
                NULL,
                "",
                "",
                NO_CITATION, {{"",DbType::ACCESS_MODE_INPUT, NULL}}},
};
